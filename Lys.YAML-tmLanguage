# [PackageDev] target_format: plist, ext: tmLanguage
name: Lys
scopeName: source.lys
fileTypes: [lys]
uuid: 1036f296-f34d-4f64-87d9-94fcfc477ea5
patterns:
  - include: "#comments"
  - match: ^\s*(package)\b(?:\s*([^ ;$]+)\s*)?
    captures:
      "1": { name: keyword.other.lys }
      "2": { name: entity.name.package.lys }
  - include: "#imports"
  - include: "#statements"
repository:
  impl:
    begin: (?<!::)(?=\b(?:impl)\b)
    end: (?=$|\})
    patterns:
      - include: "#comments"
      - begin: \b(impl)\b
        beginCaptures:
          "1": { name: storage.type.type.lys }
        end: (?=<|\{|\(|:|$)
        patterns:
          - include: "#comments"
          - name: entity.name.type.type.lys
            match: \w+
      - begin: <
        end: ">"
        patterns:
          - include: "#generics"
      - begin: \{
        end: \}
        patterns:
          - include: "#statements"
  wasm:
    begin: (?=(?:%wasm)\b)
    end: (?=$|\})
    patterns:
      - include: "#comments"
      - match: (%wasm)\b
        captures:
          "1": { name: keyword.lys }
      - begin: \{
        end: \}
        patterns:
          - include: "#comments"
          - include: "#wasm_string"
          - include: "#wasm_constants"
          - include: "#wasm_keywords"
          - include: "#wasm_variables"
  structs:
    begin: (?<!::)(?=\b(?:struct)\b)
    end: (?=$|\})
    patterns:
      - include: "#comments"
      - begin: \b(struct)\b
        beginCaptures:
          "1": { name: storage.type.class.lys }
        end: (?=<|\{|\(|:|$)
        patterns:
          - include: "#comments"
          - name: entity.name.type.lys
            match: \w+
      - begin: <
        end: ">"
        patterns:
          - include: "#generics"
      - begin: \(
        end: \)
        patterns:
          - include: "#parameters"
  comments:
    patterns:
      - name: comment.block.lys
        begin: /\*
        end: \*/
        captures:
          "0": { name: punctuation.definition.comment.lys }
      - match: \s*((//).*$\n?)
        captures:
          "1": { name: comment.line.double-slash.lys }
          "2": { name: punctuation.definition.comment.lys }
  constants:
    patterns:
      - name: constant.language.lys
        match: \b(true|false)\b
      - name: constant.numeric.lys
        match: \b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFf])?\b
      - name: constant.other.lys
        match: \b([A-Z][A-Z0-9_]+)\b
  expressions:
    patterns:
      - begin: \(
        end: \)
        patterns:
          - include: "#expressions"
      - include: "#wasm"
      - include: "#types"
      - include: "#strings"
      - include: "#constants"
      - include: "#comments"
      - include: "#keywords"
  functions:
    begin: (?=\s*\b(?:fun)\b)
    end: (?=$|\})
    patterns:
      - begin: \b(fun)\b
        beginCaptures:
          "1": { name: storage.type.function.lys }
        end: (?=\()
        patterns:
          - match: (\w+|\|\||&&|&|\||\+\+|\-\-|\+|\-|==|!=|==|!==|<=|>=|<<|>>>|>>|<|>|/|\*|\*\*|%|~|\^)
            captures:
              "1": { name: entity.name.function.lys }
          - begin: <
            end: ">"
            patterns:
              - include: "#generics"
      - begin: \(
        end: \)
        patterns:
          - include: "#parameters"
      - begin: (?=:)
        beginCaptures:
          "1": { name: keyword.operator.declaration.lys }
        end: (?={|=|$)
        patterns:
          - include: "#types"
      - begin: \{
        end: (?=\})
        patterns:
          - include: "#statements"
      - begin: (=)
        beginCaptures:
          "1": { name: keyword.operator.assignment.lys }
        end: (?=$)
        patterns:
          - include: "#expressions"
  generics:
    patterns:
      - begin: (?=:)
        beginCaptures:
          "1": { name: keyword.operator.declaration.lys }
        end: (?=,|>)
        patterns:
          - include: "#types"
      - include: "#keywords"
      - name: storage.type.generic.lys
        match: \w+
  imports:
    patterns:
      - match: ^\s*(import)\s+[^ $]+\s+(as)?
        captures:
          "1": { name: keyword.other.lys }
          "2": { name: keyword.other.lys }
  keywords:
    patterns:
      - name: storage.modifier.lys
        match: \b(var|val|public|private|protected|abstract|final|sealed|enum|open|attribute|annotation|override|inline|vararg|in|out|internal|tailrec|operator|infix|const|yield|typealias|typeof|reified|suspend)\b
      - name: keyword.control.lys
        match: \b(if|else|while|for|loop|case|do|return|when|where|break|continue|match)\b
      - name: keyword.control.lys
        match: (%stack|%injected)\b
      - name: keyword.operator.lys
        match: \b(is|as)\b
      - name: keyword.operator.comparison.lys
        match: (==|!=|==|!==|<=|>=|<<|>>>|>>|<|>)
      - name: keyword.operator.assignment.lys
        match: (=)
      - name: source.lys
        match: (::)
      # - name: keyword.operator.declaration.lys
      #   match: (:)
      - name: keyword.operator.arithmetic.lys
        match: (\-|\+|\*|\/|%|~|^)
      - name: keyword.operator.logical.lys
        match: (!|&&|\|\|)
  parameters:
    patterns:
      - begin: (?=:)
        beginCaptures:
          "1": { name: keyword.operator.declaration.lys }
        end: (?=,|\)|=)
        patterns:
          - include: "#types"
      - begin: (=)
        beginCaptures:
          "1": { name: keyword.operator.declaration.lys }
        end: (?=,|\))
        patterns:
          - include: "#expressions"
      - include: "#keywords"
      - name: variable.parameter.function.lys
        match: \w+
  statements:
    patterns:
      - include: "#typedefs"
      - include: "#structs"
      - include: "#impl"
      - include: "#functions"
      - include: "#variables"
      - include: "#expressions"
  strings:
    patterns:
      - name: string.quoted.third.lys
        begin: '"""'
        beginCaptures:
          "0": { name: punctuation.definition.string.begin.lys }
        end: '"""'
        endCaptures:
          "0": { name: punctuation.definition.string.end.lys }
        patterns:
          - name: variable.parameter.template.lys
            match: (\$\w+|\$\{[^\}]+\})
          - name: constant.character.escape.lys
            match: \\.
      - name: string.quoted.double.lys
        begin: '"'
        beginCaptures:
          "0": { name: punctuation.definition.string.begin.lys }
        end: '"'
        endCaptures:
          "0": { name: punctuation.definition.string.end.lys }
        patterns:
          - match: (\$\w+|\$\{[^\}]+\})
            name: variable.parameter.template.lys
          - match: \\.
            name: constant.character.escape.lys
      - name: string.quoted.single.lys
        begin: "'"
        beginCaptures:
          "0": { name: punctuation.definition.string.begin.lys }
        end: "'"
        endCaptures:
          "0": { name: punctuation.definition.string.end.lys }
        patterns:
          - name: constant.character.escape.lys
            match: \\.
      - name: string.quoted.single.lys
        begin: "`"
        beginCaptures:
          "0": { name: punctuation.definition.string.begin.lys }
        end: "`"
        endCaptures:
          "0": { name: punctuation.definition.string.end.lys }
  typedefs:
    begin: (?=\s*(?:type|enum))
    end: (?=\{?$)
    patterns:
      - name: storage.type.class.lys
        match: \b(type|enum)\b
      - match: ([a-zA-Z][a-zA-Z0-9_]*)
        name: entity.name.type.lys
      - begin: <
        end: ">"
        patterns:
          - include: "#generics"
      - include: "#expressions"
  types:
    patterns:
      - name: storage.type.buildin.lys
        match: (%struct|%stack|%injected)\b
      - begin: (:\s*)([A-Z][A-Za-z0-9_]*)<\b
        beginCaptures:
          "1": { name: keyword.operator.declaration.lys }
          "2": { name: support.type.buildin.collection.lys }
        end: ">"
        patterns:
          - include: "#types"
          - include: "#keywords"
      - begin: \w+<
        end: ">"
        patterns:
          - include: "#types"
          - include: "#keywords"
      - begin: \{
        end: \}
        patterns:
          - include: "#statements"
      - begin: \(
        end: \)
        patterns:
          - include: "#types"
      - match: (:\s*)([A-Z][A-Za-z0-9_]*)\b
        captures:
          "1": { name: keyword.operator.declaration.lys }
          "2": { name: support.type.lys }
      - match: (:\s*)([a-z][A-Za-z0-9_]*)\b
        captures:
          "1": { name: keyword.operator.declaration.lys }
          "2": { name: support.type.buildin.lys }
      - name: keyword.operator.declaration.lys
        match: (->)
  variables:
    begin: (?=\s*\b(?:var|val)\b)
    end: (?=:|=|(\b(by)\b)|$)
    patterns:
      - begin: \b(var|val)\b
        beginCaptures:
          "1": { name: storage.type.var.lys }
        end: (?=:|=|(\b(by)\b)|$)
        patterns:
          - begin: <
            end: ">"
            patterns:
              - include: "#generics"
          - match: ([\.<\?>\w]+\.)?(\$?\w+)
            captures:
              "2": { name: entity.name.variable.lys }
      - begin: (?=:)
        beginCaptures:
          "1": { name: keyword.operator.declaration.lys }
        end: (?==|$)
        patterns:
          - include: "#types"
      - begin: \b(by)\b
        beginCaptures:
          "1": { name: keyword.other.lys }
        end: (?=$)
        patterns:
          - include: "#expressions"
      - begin: (=)
        beginCaptures:
          "1": { name: keyword.operator.assignment.lys }
        end: (?=$)
        patterns:
          - include: "#expressions"

  wasm_string:
    name: string.quoted.double.wasm
    begin: (?<!\\)(")
    beginCaptures:
      "1": { name: punctuation.definition.string.begin.wasm }
    end: (")
    endCaptures:
      "1": { name: punctuation.definition.string.end.wasm }
    patterns:
      - match: \\.
        name: constant.character.escape.wasm
  wasm_constants:
    patterns:
      - match: \b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFf])?\b
        name: support.constant.wasm
  wasm_keywords:
    patterns:
      - match: \b(block|if|then|else|end)\b
        name: keyword.control.conditional.wasm
      - match: \b(local)\b
        name: keyword.control.local.wasm
      - match: \b(loop)\b
        name: keyword.control.loop.wasm
      - match: \b(unreachable|nop|br|br_if|br_if_table|return|call|call_indirect|drop)\b
        name: keyword.control.flow.wasm
      - match: \b(get_local|set_local|tee_local|get_global|set_global|const)\b
        name: support.function.wasm
      - match: \b(i32|i64|f32|f64)\.([a-zA-Z0-9_./]*)?\b
        captures:
          "1": { name: support.type.datatype.wasm }
          "2": { name: support.function.lys }
  wasm_variables:
    name: variable.other.wasm
    match: (?<=\s)\$\S+\s
